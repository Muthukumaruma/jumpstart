{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport NETWORK from '../utls/network';\n\nconst Swift = props => {\n  const {\n    0: swiftId,\n    1: setSwiftId\n  } = useState(\"\");\n  const {\n    0: time,\n    1: setTime\n  } = useState(0);\n  const {\n    0: bankData,\n    1: setBankData\n  } = useState({});\n  const {\n    0: accountNo,\n    1: setaccountNo\n  } = useState(\"\");\n  const {\n    0: confAccountNo,\n    1: setconfAccountNo\n  } = useState(\"\");\n  const {\n    0: type,\n    1: settype\n  } = useState(\"password\");\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\");\n  const {\n    0: accValid,\n    1: setaccValid\n  } = useState(false);\n  useEffect(() => {\n    doSearch(swiftId);\n  }, [swiftId]);\n\n  const doSearch = id => {\n    if (id.length == 8 || id.length == 11) {\n      if (time) clearTimeout(time);\n      checkSwift();\n    }\n  };\n\n  const checkSwift = () => {\n    debugger;\n    NETWORK.post(`v1/banks/find`, JSON.stringify({\n      'swift_bic': swiftId\n    })).then(function (res) {\n      res !== undefined ? setBankData(res.data) : setBankData([]);\n    });\n  };\n\n  const validate = () => {\n    setError(\"\");\n    accountNo.length > 8 ? setError(\"\") : setError(\"Enter valid account number\");\n  };\n\n  const validateAcc = val => {\n    setconfAccountNo(val);\n\n    if (accountNo.length !== 0 && val.length === accountNo.length) {\n      if (val === accountNo) {\n        setaccValid(true);\n        settype(\"text\");\n        setError(\"\");\n      } else {\n        setaccValid(false);\n        setError(\"Account number not same\");\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", null, \"SWIFT\"), __jsx(\"input\", {\n    type: \"text\",\n    className: \"caps\",\n    value: swiftId,\n    onChange: e => {\n      setSwiftId(e.target.value.toUpperCase());\n    }\n  }), Object.keys(bankData).length !== 0 ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"bank-detail\"\n  }, __jsx(\"p\", null, bankData.bank_name, \" \", __jsx(\"br\", null), bankData.bank_address1, \" \", __jsx(\"br\", null), bankData.bank_address2, \" \", __jsx(\"br\", null), bankData.bank_city, \", \", bankData.bank_state_province, \" \", __jsx(\"br\", null), bankData.bank_postal_code))) : __jsx(React.Fragment, null)), __jsx(\"div\", {\n    className: \"form-control\"\n  })), __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", null, \"Account number\"), __jsx(\"input\", {\n    type: type,\n    value: accountNo,\n    onChange: e => {\n      setaccountNo(e.target.value);\n      setError(\"\");\n    },\n    onBlur: e => {\n      validate();\n    }\n  })), __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", null, \"Confirm account number\"), __jsx(\"input\", {\n    type: \"text\",\n    value: confAccountNo,\n    onChange: e => {\n      validateAcc(e.target.value);\n    }\n  }))), error !== \"\" ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"p\", {\n    className: \"error\"\n  }, error)))) : __jsx(React.Fragment, null), accValid ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"p\", {\n    className: \"success\"\n  }, \"Account Number Valid\")))) : __jsx(React.Fragment, null));\n};\n\nexport default Swift;","map":{"version":3,"sources":["/Users/ecom-muthukumar.u/prr/jumpstart/components/banking/swift.js"],"names":["React","useState","useEffect","NETWORK","Swift","props","swiftId","setSwiftId","time","setTime","bankData","setBankData","accountNo","setaccountNo","confAccountNo","setconfAccountNo","type","settype","error","setError","accValid","setaccValid","doSearch","id","length","clearTimeout","checkSwift","post","JSON","stringify","then","res","undefined","data","validate","validateAcc","val","e","target","value","toUpperCase","Object","keys","bank_name","bank_address1","bank_address2","bank_city","bank_state_province","bank_postal_code"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport NETWORK from '../utls/network';\n\nconst Swift =(props)=>{\n    const [swiftId, setSwiftId] = useState(\"\");\n    const [time, setTime] = useState(0)\n    const [bankData, setBankData] = useState({})\n    const [accountNo, setaccountNo] = useState(\"\")\n    const [confAccountNo, setconfAccountNo] = useState(\"\")\n    const [type, settype] = useState(\"password\");\n    const [error, setError] = useState(\"\");\n    const [accValid, setaccValid] = useState(false);\n    \n    useEffect(()=>{\n        doSearch(swiftId)\n    },[swiftId])\n\n    const doSearch = (id) => {\n        if(id.length == 8 || id.length == 11){\n            if (time ) clearTimeout(time);\n            checkSwift();\n        }\n        \n      }\n\n      const checkSwift =()=>{\n          debugger\n        NETWORK.post(`v1/banks/find`, JSON.stringify({'swift_bic':swiftId}))\n        .then(function(res) {\n            res !== undefined ? setBankData(res.data) : setBankData([]);\n        })\n      }\n\n      const validate =()=>{\n        setError(\"\")\n        accountNo.length>8 ? setError(\"\"): setError(\"Enter valid account number\")\n      }\n\n      const validateAcc =(val)=>{\n        setconfAccountNo(val)\n       \n        if( accountNo.length!==0 && val.length === accountNo.length){\n            if(val === accountNo){\n                setaccValid(true);\n                settype(\"text\");\n                setError(\"\")\n                \n            }else{\n                setaccValid(false); \n                setError(\"Account number not same\")\n            }\n        }\n      }\n\n    return(\n        <>\n            <div className=\"banking__form-set\">\n                <div className=\"form-control\">\n                    <label>SWIFT</label>\n                    <input type=\"text\" className=\"caps\" value={swiftId} onChange={(e)=>{setSwiftId(e.target.value.toUpperCase())}} />\n                    {Object.keys(bankData).length !== 0 ? (<>\n                        <div className=\"bank-detail\">\n                            <p>\n                                {bankData.bank_name} <br />\n                                {bankData.bank_address1} <br />\n                                {bankData.bank_address2} <br />\n                                {bankData.bank_city}, {bankData.bank_state_province} <br />\n                                {bankData.bank_postal_code}\n                            </p>\n                        </div>\n                    </>):(<></>)}\n                </div>\n                <div className=\"form-control\"></div>\n            </div>\n            <div className=\"banking__form-set\">\n                <div className=\"form-control\">\n                    <label>Account number</label>\n                    <input type={type} value={accountNo} onChange={(e)=>{setaccountNo(e.target.value); setError(\"\")}}  onBlur={(e)=>{validate()}}/>\n                </div>\n                <div className=\"form-control\">\n                    <label>Confirm account number</label>\n                    <input type=\"text\" value={confAccountNo} onChange={(e)=>{validateAcc(e.target.value)}} />\n                </div>\n                \n            </div>\n            \n            {error !== \"\" ?(\n                <>  \n                    <div className=\"banking__form-set\">\n                        <div className=\"form-control\">\n                        <p className=\"error\">{error}</p>\n                        </div>\n                        \n                    </div>\n                </>\n                ):(<></>)}\n\n                {accValid  ?(\n                <>  \n                    <div className=\"banking__form-set\">\n                        <div className=\"form-control\">\n                        <p className=\"success\">Account Number Valid</p>\n                        </div>\n                        \n                    </div>\n                </>\n                ):(<></>)}\n        </>\n    )\n}\n\nexport default Swift;"]},"metadata":{},"sourceType":"module"}