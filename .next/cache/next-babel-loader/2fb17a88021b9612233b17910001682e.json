{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport NETWORK from '../utls/network';\n\nvar Swift = function Swift(props) {\n  _s();\n\n  var _useState = useState(\"\"),\n      swiftId = _useState[0],\n      setSwiftId = _useState[1];\n\n  var _useState2 = useState(0),\n      time = _useState2[0],\n      setTime = _useState2[1];\n\n  var _useState3 = useState({}),\n      bankData = _useState3[0],\n      setBankData = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      accountNo = _useState4[0],\n      setaccountNo = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      confAccountNo = _useState5[0],\n      setconfAccountNo = _useState5[1];\n\n  var _useState6 = useState(\"password\"),\n      type = _useState6[0],\n      settype = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      error = _useState7[0],\n      setError = _useState7[1];\n\n  var _useState8 = useState(false),\n      accValid = _useState8[0],\n      setaccValid = _useState8[1];\n\n  useEffect(function () {\n    doSearch(swiftId);\n  }, [swiftId]);\n\n  var doSearch = function doSearch(id) {\n    var searchText = id.target.value;\n\n    if (id.length == 8 || id.length == 11) {\n      if (time) clearTimeout(time);\n      checkSwift();\n    }\n  };\n\n  var checkSwift = function checkSwift() {\n    debugger;\n    NETWORK.post(\"v1/banks/find\", JSON.stringify({\n      'swift_bic': swiftId\n    })).then(function (res) {\n      res !== undefined ? setBankData(res.data) : setBankData([]);\n    });\n  };\n\n  var validate = function validate() {\n    setError(\"\");\n    accountNo.length > 8 ? setError(\"\") : setError(\"Enter valid account number\");\n  };\n\n  var validateAcc = function validateAcc(val) {\n    setconfAccountNo(val);\n\n    if (accountNo.length !== 0 && val.length === accountNo.length) {\n      if (val === accountNo) {\n        setaccValid(true);\n        settype(\"text\");\n        setError(\"\");\n      } else {\n        setaccValid(false);\n        setError(\"Account number not same\");\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", null, \"SWIFT\"), __jsx(\"input\", {\n    type: \"text\",\n    className: \"caps\",\n    value: swiftId,\n    onChange: function onChange(e) {\n      setSwiftId(e.target.value.toUpperCase());\n    }\n  }), Object.keys(bankData).length !== 0 ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"bank-detail\"\n  }, __jsx(\"p\", null, bankData.bank_name, \" \", __jsx(\"br\", null), bankData.bank_address1, \" \", __jsx(\"br\", null), bankData.bank_address2, \" \", __jsx(\"br\", null), bankData.bank_city, \", \", bankData.bank_state_province, \" \", __jsx(\"br\", null), bankData.bank_postal_code))) : __jsx(React.Fragment, null)), __jsx(\"div\", {\n    className: \"form-control\"\n  })), __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", null, \"Account number\"), __jsx(\"input\", {\n    type: type,\n    value: accountNo,\n    onChange: function onChange(e) {\n      setaccountNo(e.target.value);\n      setError(\"\");\n    },\n    onBlur: function onBlur(e) {\n      validate();\n    }\n  })), __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", null, \"Confirm account number\"), __jsx(\"input\", {\n    type: \"text\",\n    value: confAccountNo,\n    onChange: function onChange(e) {\n      validateAcc(e.target.value);\n    }\n  }))), error !== \"\" ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"p\", {\n    className: \"error\"\n  }, error)))) : __jsx(React.Fragment, null), accValid ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"banking__form-set\"\n  }, __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"p\", {\n    className: \"success\"\n  }, \"Account Number Valid\")))) : __jsx(React.Fragment, null));\n};\n\n_s(Swift, \"HA5ullxhYt3PcfiAy5qhcR3Q0TQ=\");\n\n_c = Swift;\nexport default Swift;\n\nvar _c;\n\n$RefreshReg$(_c, \"Swift\");","map":{"version":3,"sources":["/Users/ecom-muthukumar.u/prr/jumpstart/components/banking/swift.js"],"names":["React","useState","useEffect","NETWORK","Swift","props","swiftId","setSwiftId","time","setTime","bankData","setBankData","accountNo","setaccountNo","confAccountNo","setconfAccountNo","type","settype","error","setError","accValid","setaccValid","doSearch","id","searchText","target","value","length","clearTimeout","checkSwift","post","JSON","stringify","then","res","undefined","data","validate","validateAcc","val","e","toUpperCase","Object","keys","bank_name","bank_address1","bank_address2","bank_city","bank_state_province","bank_postal_code"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport NETWORK from '../utls/network';\n\nconst Swift =(props)=>{\n    const [swiftId, setSwiftId] = useState(\"\");\n    const [time, setTime] = useState(0)\n    const [bankData, setBankData] = useState({})\n    const [accountNo, setaccountNo] = useState(\"\")\n    const [confAccountNo, setconfAccountNo] = useState(\"\")\n    const [type, settype] = useState(\"password\");\n    const [error, setError] = useState(\"\");\n    const [accValid, setaccValid] = useState(false);\n    \n    useEffect(()=>{\n        doSearch(swiftId)\n    },[swiftId])\n\n    const doSearch = (id) => {\n        let searchText = id.target.value; \n        if(id.length == 8 || id.length == 11){\n            if (time ) clearTimeout(time);\n            checkSwift();\n        }\n        \n      }\n\n      const checkSwift =()=>{\n          debugger\n        NETWORK.post(`v1/banks/find`, JSON.stringify({'swift_bic':swiftId}))\n        .then(function(res) {\n            res !== undefined ? setBankData(res.data) : setBankData([]);\n        })\n      }\n\n      const validate =()=>{\n        setError(\"\")\n        accountNo.length>8 ? setError(\"\"): setError(\"Enter valid account number\")\n      }\n\n      const validateAcc =(val)=>{\n        setconfAccountNo(val)\n       \n        if( accountNo.length!==0 && val.length === accountNo.length){\n            if(val === accountNo){\n                setaccValid(true);\n                settype(\"text\");\n                setError(\"\")\n                \n            }else{\n                setaccValid(false); \n                setError(\"Account number not same\")\n            }\n        }\n      }\n\n    return(\n        <>\n            <div className=\"banking__form-set\">\n                <div className=\"form-control\">\n                    <label>SWIFT</label>\n                    <input type=\"text\" className=\"caps\" value={swiftId} onChange={(e)=>{setSwiftId(e.target.value.toUpperCase())}} />\n                    {Object.keys(bankData).length !== 0 ? (<>\n                        <div className=\"bank-detail\">\n                            <p>\n                                {bankData.bank_name} <br />\n                                {bankData.bank_address1} <br />\n                                {bankData.bank_address2} <br />\n                                {bankData.bank_city}, {bankData.bank_state_province} <br />\n                                {bankData.bank_postal_code}\n                            </p>\n                        </div>\n                    </>):(<></>)}\n                </div>\n                <div className=\"form-control\"></div>\n            </div>\n            <div className=\"banking__form-set\">\n                <div className=\"form-control\">\n                    <label>Account number</label>\n                    <input type={type} value={accountNo} onChange={(e)=>{setaccountNo(e.target.value); setError(\"\")}}  onBlur={(e)=>{validate()}}/>\n                </div>\n                <div className=\"form-control\">\n                    <label>Confirm account number</label>\n                    <input type=\"text\" value={confAccountNo} onChange={(e)=>{validateAcc(e.target.value)}} />\n                </div>\n                \n            </div>\n            \n            {error !== \"\" ?(\n                <>  \n                    <div className=\"banking__form-set\">\n                        <div className=\"form-control\">\n                        <p className=\"error\">{error}</p>\n                        </div>\n                        \n                    </div>\n                </>\n                ):(<></>)}\n\n                {accValid  ?(\n                <>  \n                    <div className=\"banking__form-set\">\n                        <div className=\"form-control\">\n                        <p className=\"success\">Account Number Valid</p>\n                        </div>\n                        \n                    </div>\n                </>\n                ):(<></>)}\n        </>\n    )\n}\n\nexport default Swift;"]},"metadata":{},"sourceType":"module"}